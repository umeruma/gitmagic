== 基本のトリック ==

Gitコマンドの海に飛び込むよりもまず、初歩的な例を使ってその足を濡らしてみましょう。その単純さにも関わらず、どれもが便利です。
本当に、Gitを使った最初の1ヶ月間、私はこの章の内容以外のことを何もしませんでした。

=== 状態の保存 ===

何か抜本的な試みをやろうとしていますか？そうする前に、現行のディレクトリに含まれるすべてのファイルのスナップショットをとりましょう:

 $ git init
 $ git add .
 $ git commit -m "My first backup"

もし新しい編集が上手くいかない際には、元のままのバージョンを復元します:

 $ git reset --hard

もう一度状態を保存するには:

 $ git commit -a -m "Another backup"

=== 追加、削除、名前変更 ===

上気したのは、あなたが最初に*git add*を実行した時に存在していたファイルを追跡するだけです。もし新しいファイルもしくはサブディレクトリを追加するなら、Gitにこう伝えなければいけません:

 $ git add readme.txt Documentation

同じように、もしGitにあるファイルたちについて忘れて欲しいのであれば:

 $ git rm kludge.h obsolete.c
 $ git rm -r incriminating/evidence/

もしまだ消していなかった場合は、Gitがそれらのファイルを削除します。

ファイルの名前を変更することは、古い名前のファイルを削除し新しい名前のものを追加することと同じです。*mv*コマンドと同じシンタックスを持つ*git mv*というショートカットもあります。例を挙げると:

 $ git mv bug.c feature.c

=== 高度な 取り消し/やり直し ===

ある時、あなたはそのすべてが間違っていたたことを理由に過去のある地点での変更をすべて忘れ、単に戻りたくなりました。その時は:

 $ git log

が直近のコミットのリストと、そのSHA1ハッシュ値を表示します。

----------------------------------
commit 766f9881690d240ba334153047649b8b8f11c664
Author: Bob <bob@example.com>
Date:   Tue Mar 14 01:59:26 2000 -0800

    Replace printf() with write().

commit 82f5ea346a2e651544956a8653c0f58dc151275c
Author: Alice <alice@example.com>
Date:   Thu Jan 1 00:00:00 1970 +0000

    Initial commit.
----------------------------------

ハッシュ値の最初の数文字で十分コミットを特定できます。またはハッシュ値すべてをコピーし貼り付けます。次のようにタイプすると:

 $ git reset --hard 766f

与えたコミットの状態に復元され、それよりも新しいコミットは記録から永続的に破棄されます。

また別の時に、あなたは古い状態に少しの間ぽんと戻りたくなりました。この場合、次のようにタイプします:

 $ git checkout 82f5

これはあなたの時間を戻しますが、新しいコミットは保持されたままです。しかしながら、サイエンスフィクション映画の中のタイムトラベルのように、もしそこで変更しコミットした場合、あなたはもう一つの現実の中にいることになります、なぜならあなたの行動が最初に行ったものとは異なるからです。

このもう一つの現実は’branch（ブランチ）’と呼ばれ、<<branch,私たちは後ほどこれについて詳しく説明します>>。今は、ただ次のことを覚えてください

 $ git checkout master

があなたを現代に連れ戻します。また、Gitに不満を言わないようにするため、チェックアウトを実行する前に常にあなたの変更をコミットまたはリセットします。

To take the computer game analogy again:

- *`git reset --hard`*: load an old save and delete all saved games newer than the one just loaded.

- *`git checkout`*: load an old game, but if you play on, the game state will deviate from the newer saves you made the first time around. Any saved games you make now will end up in a separate branch representing the alternate reality you have entered. <<branch,We deal with this later>>.

You can choose only to restore particular files and subdirectories by appending them after the command:

 $ git checkout 82f5 some.file another.file

Take care, as this form of *checkout* can silently overwrite files. To
prevent accidents, commit before running any checkout command, especially when
first learning Git. In general, whenever you feel unsure about any operation, Git command or not, first run *git commit -a*.

Don't like cutting and pasting hashes? Then use:

 $ git checkout :/"My first b"

to jump to the commit that starts with a given message.
You can also ask for the 5th-last saved state:

 $ git checkout master~5

=== Reverting ===

In a court of law, events can be stricken from the record. Likewise, you can pick specific commits to undo.

 $ git commit -a
 $ git revert 1b6d

will undo just the commit with the given hash. The revert is recorded as a new
commit, which you can confirm by running *git log*.

=== Changelog Generation ===

Some projects require a http://en.wikipedia.org/wiki/Changelog[changelog].
Generate one by typing:

 $ git log > ChangeLog

=== Downloading Files ===

Get a copy of a project managed with Git by typing:

 $ git clone git://server/path/to/files

For example, to get all the files I used to create this site:

 $ git clone git://git.or.cz/gitmagic.git

We'll have much to say about the *clone* command soon.

=== The Bleeding Edge ===

If you've already downloaded a copy of a project using *git clone*, you can upgrade to the latest version with:

 $ git pull

=== Instant Publishing ===

Suppose you've written a script you'd like to share with others. You could just tell them to download from your computer, but if they do so while you're improving the script or making experimental changes, they could wind up in trouble.  Of course, this is why release cycles exist. Developers may work on a project frequently, but they only make the code available when they feel it is presentable.

To do this with Git, in the directory where your script resides:

 $ git init
 $ git add .
 $ git commit -m "First release"

Then tell your users to run:

 $ git clone your.computer:/path/to/script

to download your script. This assumes they have ssh access. If not, run *git daemon* and tell your users to instead run:

 $ git clone git://your.computer/path/to/script

From now on, every time your script is ready for release, execute:

 $ git commit -a -m "Next release"

and your users can upgrade their version by changing to the directory containing your script and typing:

 $ git pull

Your users will never end up with a version of your script you don't want them to see.

=== What Have I Done? ===

Find out what changes you've made since the last commit with:

 $ git diff

Or since yesterday:

 $ git diff "@{yesterday}"

Or between a particular version and 2 versions ago:

 $ git diff 1b6d "master~2"

In each case the output is a patch that can be applied with *git apply*.
Try also:

 $ git whatchanged --since="2 weeks ago"

Often I'll browse history with http://sourceforge.net/projects/qgit[qgit] instead, due to its slick photogenic interface, or http://jonas.nitro.dk/tig/[tig], a text-mode interface that works well over slow connections. Alternatively, install a web server, run *git instaweb* and fire up any web browser.

=== Exercise ===

Let A, B, C, D be four successive commits where B is the same as A except some files have been removed. We want to add the files back at D. How can we do this?

There are at least three solutions. Assuming we are at D:

  1. The difference between A and B are the removed files. We can create a patch representing this difference and apply it:

   $ git diff B A | git apply

  2. Since we saved the files back at A, we can retrieve them:

   $ git checkout A foo.c bar.h

  3. We can view going from A to B as a change we want to undo:

   $ git revert B

Which choice is best? Whichever you prefer most. It is easy to get what you want with Git, and often there are many ways to get it.
